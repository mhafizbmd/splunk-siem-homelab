# Day 1 ‚Äì SIEM (Splunk Enterprise) Home Lab Setup

This Day 1 lab sets up a working Splunk Enterprise environment inside a VirtualBox-hosted Ubuntu Server.
It simulates log ingestion and prepares a foundation for hands-on SOC analyst tasks.

---

## ‚úÖ Environment Setup

- Created a virtual machine using **Ubuntu Server 24.04 ISO** in VirtualBox.
- Installed **Splunk Enterprise** on the VM.
- Configured admin credentials using `user-seed.conf`.
- Logged into the **Splunk Web UI** from the host machine.

---

## üîÅ Port Forwarding Configuration

To enable smooth workflow and local web access:

- Forwarded host port `8000` to VM port `8000` (Splunk Web).
- Forwarded host port `2222` to VM port `22` (SSH).
- Allowed:
  - SSH access via PowerShell (for easier command input).
  - Browser access to `http://127.0.0.1:8000` to reach the Splunk UI.

---

## üîê Security Configuration

- Enabled **UFW (Uncomplicated Firewall)** on Ubuntu VM.
- Allowed only the necessary ports:
  - `22/tcp` ‚Äì SSH
  - `8000/tcp` ‚Äì Splunk Web UI
- Verified firewall status and rule effectiveness.

---

## üì¶ Log Forwarding & Ingestion

- Created `inputs.conf` to monitor `/var/log/auth.log`.
- Restarted Splunk to apply the configuration.
- Simulated logs using the `logger` command:
  - Example: `Suspicious login attempt from 192.168.x.x`
- Verified ingestion inside **Splunk Web Search** using:
  ```spl
  index=* source="/var/log/auth.log"

---

## Port Forwarding Setup
+-----------------------+           +---------------------------+
|     Host (Windows)    |           |  Ubuntu Server VM (Splunk)|
|                       |           |                           |
| PowerShell + Browser  | <-------> | NAT Interface              |
|                       | 2222‚Üí22   | - SSH                      |
| 127.0.0.1:8000        | <-------> | - Splunk Web UI (8000)     |
+-----------------------+           +---------------------------+

## üì∏ Screenshots
## Screenshots

### 1. Splunk CLI ‚Äì Log & Port Monitoring
This screenshot shows the CLI interface of the Ubuntu Server where Splunk is running. It confirms:
- Splunk service is active.
- Port 8000 is open and listening.
- Log events were simulated using the `logger` command.

![CLI ‚Äì Port & Log Check](screenshots/ssh-cli-log-sim.png.jpg)
![CLI](screenshots/ssh-cli-log-sim.png.jpg)




---

### 2. Splunk Web Interface ‚Äì Successful Login
This confirms:
- Splunk Web UI is accessible from the host browser.
- Port forwarding is working (127.0.0.1:8000).
- Admin credentials were successfully used.

![Splunk Login](screenshots/Splunk.jpg)

---

### 3. Splunk Enterprise Setup & Login via Host Browser
Displays the sequence of launching the web interface after boot and login.

![Splunk Setup via Host](screenshots/Splunk\ Enterprise\ Setup\ \&\ Login\ via\ host.png)

---

### 4. Firewall (UFW) ‚Äì Secure & Show Control
This output verifies the firewall was enabled and port access was controlled properly:
- Port 22 (SSH) and 8000 (Splunk Web) are explicitly allowed.
- Default policy denies all incoming traffic.

![Firewall Rules](screenshots/Firewall\ \(UFW\)\ \‚Äì\ Secure\ \&\ Show\ Control.jpg)

---

### 5. Network Visibility & Port Monitoring
Used `netstat` to validate open ports and confirm Splunk services were bound correctly.

![Network Visibility](screenshots/Network\ Visibility\ \&\ Port\ Monitoring.jpg)



